#!/usr/bin/python3
# NGOKO LANGUAGE versi 1.0
# Author: Muhammad Khidhir Ibrahim (Gtx666Ti)

import sys,re
class Ngoko:
    def __init__(self, fileProgram = "", debug=False):
        self.ver                = "v1.0 BETA"
        self.debug              = debug
        self.version            = "Ngoko Language ({})".format(self.ver)
        self.banner             = """### NGOKO-LANG ({}) ###\n""".format(self.ver)
        self.endNgoko           = """### END NGOKO-LANG ###"""
        self.fileProgram        = fileProgram
        self.openGroup          = False
    def operators(self, operator):
        if operator == "luwih saka" or operator == "luwih seko":
            operator = ">"
        elif operator == "kurang saka" or operator == "kurang seko":
            operator = "<"
        elif operator == "luwih pada" or operator == "luwih podo":
            operator = ">="
        elif operator == "kurang pada" or operator == "kurang podo":
            operator = "<="
        else:
            operator = "=="
        return operator
    def boolean(self, operator):
        if data == "tenanan":
            data = True
        elif data == "ngapusi":
            data = False
        return data
    def getCode(self):
        f = open(self.fileProgram, "r")
        return f.read().split("\n")
    def write(self, code):
        match = re.match(r"tulis (.*)", code)
        if match:
            return "print({})\n".format(match.group(1))
        else:
            return False
    def looperWhile(self, code):
        match = re.match("itung nek ([a-z]+) ([a-z]+) (.*)", code)
        if match:
            operator    =  self.operators(match.group(2))
            condition   =  "{} {} {}".format(match.group(1), operator, match.group(3))
            return "while({}):\n".format(condition)
        else:
            return False
    def looperFor(self, code):
        match = re.match("itung ([0-9]+) tekan ([0-9]+) ning (.*)", code)
        if match:
            return "for {} in range({}, {}+1):\n".format(match.group(3), match.group(1), match.group(2))
        else:
            return False
    def elseCondition(self, code):
        match = re.match("nek dudu", code)
        match2 = re.match("nek ora", code)
        if match or match2:
            return "else:\n"
        else:
            return False
    def functioner(self, code):
        match = re.match(r"dinggo (.*)\((.*)\)", code)
        if match:
            return "def {}({}):\n".format(match.group(1), match.group(2))
    def inputer(self, code):
        match = re.match(r"takon ([a-zA-Z0-9]+) (.*)", code)
        if match:
            return "{} = input({})\n".format(match.group(1), match.group(2))
        else:
            return False
    def setInt(self, code):
        match = re.match(r"angka\(([a-zA-Z0-9]+)\)", code)
        match2 = re.match(r"angka ([a-zA-Z0-9]+)", code)
        if match:
            return "{} = int({})\n".format(match.group(1), match.group(1))
        elif match2:
            return "{} = int({})\n".format(match2.group(1), match2.group(1))
        else:
            return False
    def setStr(self, code):
        match = re.match(r"tulisan\(([a-zA-Z0-9]+)\)", code)
        match2 = re.match(r"tulisan ([a-zA-Z0-9]+)", code)
        if match:
            return "{} = str({})\n".format(match.group(1), match.group(1))
        elif match2:
            return "{} = str({})\n".format(match2.group(1), match2.group(1))
        else:
            return False
    def ifOperateCondition(self, code):
        match = re.match(r"nek (.*) ([a-z]+ [a-z]+) (.*)", code)
        match2 = re.match(r"nek ([a-z]+) ki (.*)", code)

        if match:
            operator = match.group(2)
            if operator == "luwih seko":
                operator = ">"
            elif operator == "kurang seko":
                operator = "<"
            elif operator == "luwih podo":
                operator = ">="
            elif operator == "kurang podo":
                operator = "<="
            return "if {} {} {}:\n".format(match.group(1), operator,match.group(3))
        elif match2:
            return "if {} == {}:\n".format(match2.group(1),match2.group(2))
        else:
            return False
    def elifOperateCondition(self, code):
        match = re.match(r"nek ra (.*) ([a-z]+ [a-z]+) (.*)", code)
        match2 = re.match(r"nek ra (.*) ki (.*)", code)
        if match:
            operator = match.group(2)
            if operator == "luwih seko":
                operator = ">"
            elif operator == "kurang seko":
                operator = "<"
            elif operator == "luwih podo":
                operator = ">="
            elif operator == "kurang podo":
                operator = "<="
            return "elif {} {} {}:\n".format(match.group(1), operator,match.group(3))
        elif match2:
            return "elif {} == {}:\n".format(match2.group(1),match2.group(2))
        else:
            return False
            
    def declareVar(self, code):
        match = re.match(r"dadi (.*) ki (.*)", code)
        match2 = re.match(r"dadi (.*) e (.*)", code)
        if match:
            return "{} = {}\n".format(match.group(1), match.group(2))
        elif match2:
            return "{} = {}\n".format(match2.group(1), match2.group(2))
        else:
            return False
    def syntax(self,code):
        output = ""
        if self.functioner(code):
            output += self.functioner(code)
        elif self.looperWhile(code):
            output += self.looperWhile(code)
        elif self.setInt(code):
            output += self.setInt(code)
        elif self.setStr(code):
            output += self.setStr(code)
        elif self.looperFor(code):
            output += self.looperFor(code)
        elif self.inputer(code):
            output += self.inputer(code)
        elif self.elseCondition(code):
            output += self.elseCondition(code)
        elif self.elifOperateCondition(code):
            output += self.elifOperateCondition(code)
        elif self.ifOperateCondition(code):
            output += self.ifOperateCondition(code)
        elif self.write(code):
            output += self.write(code)
        elif self.declareVar(code):
            output += self.declareVar(code)
        else:
            output += code+"\n"
        return output
    def compile(self):
        indent = ""
        output = self.banner
        codes = self.getCode()
        for c in codes:
            if len(c.split("    ")) > 1:
                for i in range(len(c.split("    "))-1):
                    indent += "    "
                code = c.replace("\t", "").replace("    ", "")
            else:
                code = c
            output += indent + self.syntax(code)
            indent = ""
        return output
    def execute(self):
        if self.debug:
            print(self.compile())
        else:
            exec(self.compile())
    def getUsage(self):
        print(self.version)
        print("Usage : {} file.ngoko".format("ngoko"))
if __name__ == '__main__':
    if len(sys.argv) < 2:
        ngoko = Ngoko()
        ngoko.getUsage(
            
        )
    elif len(sys.argv) <= 2:
        ngoko = Ngoko(sys.argv[1], debug=False)
        ngoko.execute()
    else:
        ngoko = Ngoko(sys.argv[1], debug=True)
        ngoko.execute()